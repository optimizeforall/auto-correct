/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var h=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var f=Object.prototype.hasOwnProperty;var w=(o,e)=>{for(var t in e)h(o,t,{get:e[t],enumerable:!0})},I=(o,e,t,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let a of A(e))!f.call(o,a)&&a!==t&&h(o,a,{get:()=>e[a],enumerable:!(r=m(e,a))||r.enumerable});return o};var E=o=>I(h({},"__esModule",{value:!0}),o);var k={};w(k,{default:()=>g});module.exports=E(k);var s=require("obsidian"),C={apiKey:"",keyboardLayout:"QWERTY",model:"gpt-3.5-turbo"},g=class extends s.Plugin{constructor(){super(...arguments);this.processingIndicator=null}async onload(){await this.loadSettings(),this.statusBarItem=this.addStatusBarItem(),this.addCommand({id:"auto-correct-file",name:"Auto-correct entire file",hotkeys:[{modifiers:["Ctrl"],key:"'"}],editorCallback:t=>this.autoCorrectText(t,!1)}),this.addCommand({id:"auto-correct-selection",name:"Auto-correct selected text",hotkeys:[{modifiers:["Ctrl","Shift"],key:"'"}],editorCallback:t=>this.autoCorrectText(t,!0)}),this.addSettingTab(new p(this.app,this))}async autoCorrectText(t,r){let a=r?t.getSelection():t.getValue(),u=a.split(/\s+/).length;if(!a){new s.Notice("No text to correct");return}let n=r?"selection":"file",i=`Processing ${n} (${u} words), please wait...`;new s.Notice(i),this.updateStatusBar(i),this.startProcessingIndicator();try{let{corrected:c,changes:l}=await this.callLLMForCorrection(a);r?t.replaceSelection(c):t.setValue(c);let d=`${n.charAt(0).toUpperCase()+n.slice(1)} auto-corrected successfully!`;new s.Notice(d),this.updateStatusBar(d),new y(this.app,l).open()}catch(c){let l="Error during auto-correction. Please check your API key and try again.";new s.Notice(l),this.updateStatusBar(l)}finally{this.stopProcessingIndicator()}}updateStatusBar(t){this.statusBarItem.setText(t),setTimeout(()=>{this.statusBarItem.setText("")},5e3)}startProcessingIndicator(){this.processingIndicator!==null&&clearInterval(this.processingIndicator);let t=0;this.processingIndicator=setInterval(()=>{t=(t+1)%4,this.statusBarItem.setText(`Processing${".".repeat(t)}`)},500)}stopProcessingIndicator(){this.processingIndicator!==null&&(clearInterval(this.processingIndicator),this.processingIndicator=null,this.statusBarItem.setText(""))}async callLLMForCorrection(t){let r=this.settings.apiKey;if(!r)throw new Error("API key is missing. Please set your OpenAI API key in the plugin settings.");let a=`Correct the grammar, syntax, and spelling for this markdown text in Obsidian, keeping links and other .md syntax intact. Assume a ${this.settings.keyboardLayout} keyboard layout for inferring nearby keys. Do not make major changes. Return the corrected text, followed by "---CHANGES---", then a numbered list of all changes made using the format "Before" to "After" (be careful and check you are displaying a real change):

"${t}"`,u=3;for(let n=1;n<=u;n++)try{let i=await(0,s.requestUrl)({url:"https://api.openai.com/v1/chat/completions",method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${r}`},body:JSON.stringify({model:this.settings.model,messages:[{role:"user",content:a}],temperature:.1})});if(i.status!==200)throw new Error(`API request failed with status ${i.status}: ${i.json.error.message}`);let c=i.json.choices[0].message.content,[l,d]=c.split("---CHANGES---");return{corrected:l.trim(),changes:d.trim()}}catch(i){if(console.error(`Attempt ${n} failed:`,i),n<u)await new Promise(c=>setTimeout(c,1e3*n));else throw new Error("Error during auto-correction after multiple attempts. Please try again later.")}return{corrected:"",changes:""}}onunload(){}async loadSettings(){this.settings=Object.assign({},C,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},p=class extends s.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}display(){let{containerEl:e}=this;e.empty(),new s.Setting(e).setName("OpenAI API Key").setDesc("Enter your OpenAI API key").addText(t=>t.setPlaceholder("Enter API key").setValue(this.plugin.settings.apiKey).onChange(async r=>{this.plugin.settings.apiKey=r,await this.plugin.saveSettings()})),new s.Setting(e).setName("Keyboard Layout").setDesc("Select your keyboard layout for better autocorrection").addDropdown(t=>t.addOptions({QWERTY:"QWERTY",AZERTY:"AZERTY",DVORAK:"DVORAK",COLEMAK:"COLEMAK"}).setValue(this.plugin.settings.keyboardLayout).onChange(async r=>{this.plugin.settings.keyboardLayout=r,await this.plugin.saveSettings()}))}},y=class extends s.Modal{constructor(e,t){super(e),this.changes=t}onOpen(){let{contentEl:e}=this;e.setText("Changes Made:"),e.createEl("pre",{text:this.changes}),e.createEl("p",{text:"You can undo these changes with Ctrl+Z (Cmd+Z on Mac)."})}onClose(){let{contentEl:e}=this;e.empty()}};
